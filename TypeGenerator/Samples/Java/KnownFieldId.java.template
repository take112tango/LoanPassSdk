package codegen@package;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.Map;

import lombok.Getter;
import lombok.ToString;

import com.youland.lib.core.serializer.ValueObservable;
import com.youland.lib.core.serializer.ValueObservableSerializer;
import com.youland.vendor.loanpass.model.field.FieldValueTypeOpt;

import static com.youland.vendor.loanpass.model.field.FieldValueTypeOpt.ENUM;
import static com.youland.vendor.loanpass.model.field.FieldValueTypeOpt.NUMBER;
import static com.youland.vendor.loanpass.model.field.FieldValueTypeOpt.STRING;
import static com.youland.vendor.loanpass.model.field.FieldValueTypeOpt.DURATION;

@Getter
@ToString
@JsonSerialize(using = ValueObservableSerializer.class)
@javax.annotation.Generated(value="codegen@gen-tool-name", date="codegen@timestamp")
/**
 * This source code was auto-generated in codegen@timestamp
 * Field definitions auto generated from LoanPass API for strong type checking
 */
public enum codegen@class implements ValueObservable<String> {
    codegen@x1

    public static final Map<String, codegen@class> VALUE2ENUM
            = ValueObservable.createMapValue2Obj(codegen@class.values());

    private final String value;

    private final FieldValueTypeOpt fieldValueType;

    private final String fieldValueRef;
    public boolean hasFieldValueRef() {return fieldValueRef != null; }

    codegen@class(String value
                    , FieldValueTypeOpt fieldValueType) {
        this(value, fieldValueType, null);
    }

    codegen@class(String value
                    , FieldValueTypeOpt fieldValueType
                    , String fieldValueRef) {
        this.value = value;
        this.fieldValueType = fieldValueType;
        this.fieldValueRef = fieldValueRef;
    }
}
